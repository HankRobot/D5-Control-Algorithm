%% file : VirtualMattoSim.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for VirtualMattoSim
%% 
%% Simulink version      : 10.0 (R2019b) 18-Jul-2019
%% TLC file generated on : 03-May-2020 22:39:13

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'VirtualMattoSim';
     def.OutputFcnSpec = 'void update(inputVector u1[1], double u2, outputVector y1[1])';
     def.HeaderFiles = {'VirtualMatto.h'};
     def.SourceFiles = {'VirtualMatto.c'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements VirtualMattoSim "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("VirtualMattoSim_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int VirtualMattoSim_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** u1BUS, int_T u1BUSWidth);
        extern int VirtualMattoSim_wrapper_freemem(void** y1BUS, void** u1BUS);

        extern void VirtualMattoSim_wrapper_Output(const void* u1, void* u1BUS, const real_T u2,  void* y1, void* y1BUS);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("VirtualMattoSim_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "VirtualMatto.h"

        int VirtualMattoSim_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** u1BUS, int_T u1BUSWidth) {
            *y1BUS = calloc(sizeof(outputVector), y1BUSWidth);
            if (*y1BUS==NULL) return -1;
            *u1BUS = calloc(sizeof(inputVector), u1BUSWidth);
            if (*u1BUS==NULL) return -1;
            return 0;
        }
        
        int VirtualMattoSim_wrapper_freemem(void** y1BUS, void** u1BUS) {
            if (*y1BUS!=NULL) free(*y1BUS);
            *y1BUS = NULL;
            if (*u1BUS!=NULL) free(*u1BUS);
            *u1BUS = NULL;
            return 0;
        }

        void VirtualMattoSim_wrapper_Output(const void* u1, void* u1BUS, const real_T u2,  void* y1, void* y1BUS) {

            /* Assign the Simulink structure u1 to user structure u1BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(0)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(inputVector *)u1BUS)", "(char *)u1", 0)>

            update((inputVector *) u1BUS, (real_T)(u2), (outputVector *) y1BUS);

            /* Assign the user structure y1BUS to the Simulink structure y1 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(outputVector *)y1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("VirtualMatto.h")>
    %endif
    %<SLibAddToStaticSources("VirtualMatto.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (VirtualMattoSim_wrapper_allocmem(%<y1BUS_addr>, %<LibBlockOutputSignalWidth(0)>, %<u1BUS_addr>, %<LibBlockInputSignalWidth(0)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y1BUS_ptr = LibBlockPWork("", "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        VirtualMattoSim_wrapper_Output(%<u1_ptr>, %<u1BUS_ptr>, %<u2_val>, %<y1_ptr>, %<y1BUS_ptr>);
    %else
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %% 
        update((inputVector*)%<u1_ptr>, %<u2_val>, %<y1_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (VirtualMattoSim_wrapper_freemem(%<y1BUSBUS_addr>, %<u1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
