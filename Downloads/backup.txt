#include "VirtualMatto.h"

int triggerFlag = 0;


//*************************************************************
// STUDENT VARIABLES GO HERE
//*************************************************************
//Variables for storing sensor values
double busbarv = 0;
double busbari = 0;
double mainsp = 0;
double windp = 0;
double solarp = 0;
double totalload = 0;
double chargetime = 0;
double batteryp = 0;

double controlbattery = 0;
double controlmains = 0;

double on1;
double on2;
double on3;
//Variables for storing load power (100kw unit)
double load1p = 0.8;
double load2p = 1.8;
double load3p = 1.4;
//----------------------
// example

double temp; // Creating a variable.
//NOTE: For simulation to work, use only "double" as the data type.
// for boolean values, use 1.0 to represent "True" and 0.0 to represent "False"

void power(){

}

//*************************************************************
/*
Input Signals
	Ai1 busbar input voltage
	Ai2 busbar input current
	Ai3 wind input voltage
	Ai4 solar input voltage

	Di1 call for 1st load
	Di2 call for 2nd load
	Di3 call for 3rd load

Output Signals
	Do1 turn on 1st load
	Do2 turn on 2nd load
	Do3 turn on 3rd load
	Ao1 busbar power, 0-3, a multiply of 100kW
	Ao2 battery power, -1 to 1, multiply of 100kW, positive means supply to grid
*/
void getsensorvalues(double voltage, double current, double wind, double solar, double load1, double load2, double load3){
	busbarv = voltage;
	busbari = current;
	windp = wind;
	solarp = solar;
	mainsp = (busbarv * busbari)/100000;
	totalload =  (load1*load1p + load2*load2p + load3*load3p) - (mainsp + windp + solarp);

	if (totalload > 0) //if overload
	{
		if (totalload <= 1) //if overload but still suppliable by battery
		{
			if (busbarv>230 && batteryp>0)  //voltage is too high, requires battery, battery still suppliable case
			{
				controlbattery = totalload;
				batteryp -= totalload;
			}
			else
			{	
				if (controlmains+totalload<3)
				{
					controlmains +=  totalload; //battery not charged, call in the mains
					controlbattery = 0;
				}
				else
				{
					controlmains =  3;
					controlbattery = 0;
				}
			}
		}
		else //if overload but even suppliable by battery is insufficient
		{
			if (busbarv>230 && batteryp>0)  //voltage is too high, requires battery, might need to consider turning load off
			{	
				controlbattery = 1; //full discharge of battery
				batteryp -= totalload;
			}
			else //no battery
			{	
				if (controlmains+totalload<3)
				{
					controlmains +=  totalload; //battery not charged, call in the mains
					controlbattery = 0;
				}
				else
				{
					controlmains =  3;
					controlbattery = 0;
				}
			}
		}
	}
	else //if underload
	{
		if (totalload>= -1)
		{
			controlbattery = totalload; //charge the battery if overall load is less than 0;
			batteryp += abs(totalload);
		}
		else
		{
			controlbattery = -1; //charge the battery if overall load is less than 0;
			batteryp += abs(totalload);

			if (controlmains - (abs(totalload) - 1) > 0) //need to check if the result is in range
			{
				controlmains -= abs(totalload) - 1; //plenty of energy, hence we can cut off the mains a bit
			}
			else
			{
				controlmains = 0;
			}
			
 		}
	}
}

void update(inputVector* input, double clk, outputVector* output)
{

	if (clk == 1 && triggerFlag == 0) //Only trigger at edge
	{
		triggerFlag = 1;
		//*************************************************************
		// STUDENT CODES GO HERE
		getsensorvalues(input->Ai1,input->Ai2,input->Ai3,input->Ai4,input->Di1,input->Di2,input->Di3);

		//----------------------
		// example
        temp = 0;

		//Setting Output
        output->Do1 = input->Di1;
		output->Do2 = input->Di2;
		output->Do3 = input->Di3;
		
        output->Ao1 = controlmains;
        output->Ao2 = controlbattery;

		// end example
		// ---------------------- 

		// STUDENT CODE END
		//*************************************************************
	}
	else if (clk == 0)
	{
		triggerFlag = 0;
	}
	return output;

}